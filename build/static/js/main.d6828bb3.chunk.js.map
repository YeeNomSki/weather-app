{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temperature","temp_min","temp_max","description","id","src","iconurl","alt","iconcode","wind_deg","wind_speed","humidity","error","apiKey","App","state","undefined","_callee","e","apiCall","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","icon","wind","deg","speed","stop","components_Titles","components_Form","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d6828bb3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Titles extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 className=\"title\">Weather of the Day!</h1>\r\n        <h2 className=\"subtitle\">Find out live weather information!</h2>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Titles;\r\n","import React from \"react\";\r\n\r\nclass Form extends React.Component {\r\n  render() {\r\n    return(\r\n      <form onSubmit={this.props.getWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"City\"/>\r\n        <input type=\"text\" name=\"country\" placeholder=\"Country\"/>\r\n        <button>Get Weather</button>\r\n      </form>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nclass Weather extends React.Component {\r\n  render() {\r\n    return(\r\n      <div>\r\n      <div>\r\n        { this.props.city && this.props.country &&\r\n          <p className=\"location\">{ this.props.city }, { this.props.country}\r\n          </p>}\r\n      </div>\r\n        <div>\r\n        { this.props.temperature &&\r\n          <p className='temp_main'>Current Temperature: { this.props.temperature }&deg;C\r\n          </p>}\r\n        </div>\r\n        <div>\r\n          { this.props.temp_min &&\r\n            <p className=\"temp_low\">Daily Low: { this.props.temp_min }&deg;C\r\n            </p>}\r\n          { this.props.temp_max &&\r\n            <p className=\"temp_high\">Daily High: { this.props.temp_max }&deg;C\r\n            </p>}\r\n        </div>\r\n        <div>\r\n          { this.props.description &&\r\n            <p className=\"condition\">\r\n              Current Condition: { this.props.description }\r\n                <img id=\"wicon\" src={this.props.iconurl} alt={this.props.iconcode}>\r\n                </img>\r\n            </p>}\r\n          </div>\r\n        <div>\r\n          { this.props.wind_deg  && this.props.wind_speed  &&\r\n            <p className=\"wind\">Wind: {this.props.wind_speed}m/s at {this.props.wind_deg}&deg;\r\n            </p>}\r\n        </div>\r\n        <div>\r\n          { this.props.humidity &&\r\n            <p className=\"humidity\">Humidity: { this.props.humidity }&#37;\r\n            </p>}\r\n        </div>\r\n        <div className=\"error_message\">\r\n          { this.props.error && <p>{ this.props.error }</p>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Weather;\r\n","import React from \"react\";\r\n\r\nimport Titles from \"./components/Titles\";\r\nimport Form from \"./components/Form\";\r\nimport Weather from \"./components/Weather\";\r\n\r\nconst apiKey = \"d971c616163c7ae140572ff2cc01b94e\";\r\n\r\nclass App extends React.Component{\r\n  state = {\r\n    temperature: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    description: undefined,\r\n    humidity: undefined,\r\n    iconcode: undefined,\r\n    iconurl: undefined,\r\n    temp_min: undefined,\r\n    temp_max: undefined,\r\n    wind_deg: undefined,\r\n    wind_speed: undefined,\r\n    error: undefined\r\n  }\r\n  getWeather = async (e) => {\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n    const apiCall = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${apiKey}&units=metric`);\r\n    const data  = await apiCall.json();\r\n    console.log(data);\r\n    if (city && country) {\r\n      this.setState({\r\n        temperature: data.main.temp,\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        description: data.weather[0].description,\r\n        humidity: data.main.humidity,\r\n        iconcode: data.weather[0].icon,\r\n        temp_min: data.main.temp_min,\r\n        temp_max: data.main.temp_max,\r\n        wind_deg: data.wind.deg,\r\n        wind_speed: data.wind.speed,\r\n        iconurl: \"http://openweathermap.org/img/w/\" + data.weather[0].icon + \".png\",\r\n        error: \"\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        description: undefined,\r\n        humidity: undefined,\r\n        iconcode: undefined,\r\n        iconurl: undefined,\r\n        temp_min: undefined,\r\n        temp_max: undefined,\r\n        wind_deg: undefined,\r\n        wind_speed: undefined,\r\n        error: \"Error: try again.\"\r\n      });\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n      <div className=\"wrapper\">\r\n        <div className=\"main\">\r\n            <div className=\"row\"></div>\r\n              <div className=\"col-xs-5 title-container\">\r\n                <Titles />\r\n              </div>\r\n              <div className=\"col-xs-7 form-container\">\r\n                <Form getWeather={this.getWeather}/>\r\n                <Weather\r\n                  temperature={this.state.temperature}\r\n                  city={this.state.city}\r\n                  country={this.state.country}\r\n                  description={this.state.description}\r\n                  humidity={this.state.humidity}\r\n                  iconcode={this.state.iconcode}\r\n                  iconurl={this.state.iconurl}\r\n                  temp_min={this.state.temp_min}\r\n                  temp_max={this.state.temp_max}\r\n                  wind_deg={this.state.wind_deg}\r\n                  wind_speed={this.state.wind_speed}\r\n                  error={this.state.error}\r\n                  />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"./App.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}